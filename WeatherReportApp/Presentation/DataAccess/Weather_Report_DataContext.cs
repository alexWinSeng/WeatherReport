// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using Presentation.DataAccess.Models;

#nullable disable

namespace Presentation.DataAccess
{
    public partial class Weather_Report_DataContext : DbContext
    {
        public Weather_Report_DataContext()
        {
        }

        public Weather_Report_DataContext(DbContextOptions<Weather_Report_DataContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Location> Location { get; set; }
        public virtual DbSet<WeatherCondition> WeatherCondition { get; set; }
        public virtual DbSet<WeatherElement> WeatherElement { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
                optionsBuilder.UseSqlServer("Data Source=.\\SQLEXPRESS;Initial Catalog=weather_report_data;User ID=sa;Password=weather@999");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("Relational:Collation", "Chinese_Taiwan_Stroke_CI_AS");

            modelBuilder.Entity<Location>(entity =>
            {
                entity.ToTable("location");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.LocationName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("locationName");
            });

            modelBuilder.Entity<WeatherCondition>(entity =>
            {
                entity.ToTable("weather_condition");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ElementId).HasColumnName("element_id");

                entity.Property(e => e.EndTime)
                    .HasMaxLength(50)
                    .HasColumnName("end_time");

                entity.Property(e => e.ParameterName)
                    .HasMaxLength(50)
                    .HasColumnName("parameter_name");

                entity.Property(e => e.ParameterValue)
                    .HasMaxLength(50)
                    .HasColumnName("parameter_value");

                entity.Property(e => e.StartTime)
                    .HasMaxLength(50)
                    .HasColumnName("start_time");
            });

            modelBuilder.Entity<WeatherElement>(entity =>
            {
                entity.ToTable("weather_element");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ElementName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("element_name");

                entity.Property(e => e.LocationId).HasColumnName("location_id");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}